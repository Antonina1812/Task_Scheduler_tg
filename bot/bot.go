package bot

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	asynq "github.com/hibiken/asynq"

	redis "github.com/redis/go-redis/v9"

	"github.com/fatih/color"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

//TODO: –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
//TODO: –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–π—Ä–æ–Ω–∫—É –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É

//TODO: —Ä–∞–∑–±–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–æ–≤
//TODO: –æ–±–µ—Ä–Ω—É—Ç—å –≤ –¥–æ–∫–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
//TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏

type Task struct {
	ChatID         int64     `bson:"chat_id"`
	Description    string    `bson:"description"`
	CreatedAt      time.Time `bson:"created_at"`
	Deadline       time.Time `bson:"deadline"`
	Mark           bool      `bson:"mark"`
	ReminderExists bool      `bson:"reminder"`
}

type BotService struct {
	api      *tgbotapi.BotAPI
	db       *mongo.Collection
	rdb      *redis.Client
	redisCtx context.Context
}

func NewBotService(api *tgbotapi.BotAPI, db *mongo.Collection, redisClient *redis.Client) *BotService {
	return &BotService{
		api:      api,
		db:       db,
		rdb:      redisClient,
		redisCtx: context.Background(),
	}
}

func (bs *BotService) HandleCommand(message *tgbotapi.Message, client *asynq.Client) {
	chatID := message.Chat.ID
	command := message.Command()
	text := message.CommandArguments()

	switch command {
	case "start":
		state, err := bs.GetCommandState(chatID)
		if err != nil {
			log.Printf("Failed to get command state: %v", err)
			bs.SendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
			return
		}
		if state == "start" {
			bs.SendMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
		}
		bs.RunSetCommand(chatID, "start")
		bs.SendMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	case "help":
		bs.RunSetCommand(chatID, "help")
		bs.SendMessage(chatID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/add <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n/list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n/delete <–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM> - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n/is_done <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏> - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É, –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n/edit <—Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> | <–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>\n/set_deadline <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> | <–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM>\n/set_reminder <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n/unset_reminder <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> - –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n/help - –ø–æ–º–æ—â—å")
	case "add":
		bs.RunSetCommand(chatID, "add")
		bs.AddTask(chatID, text, client)
	case "set_deadline":
		bs.RunSetCommand(chatID, "set_deadline")
		bs.SetDeadline(chatID, text, client)
	case "list":
		bs.RunSetCommand(chatID, "list")
		bs.ListTasks(chatID)
	case "delete":
		bs.RunSetCommand(chatID, "delete")
		bs.DeleteTask(chatID, text)
	case "edit":
		bs.RunSetCommand(chatID, "edit")
		bs.EditTask(chatID, text)
	case "is_done":
		bs.RunSetCommand(chatID, "is_done")
		bs.IsDone(chatID, text)
	case "set_reminder":
		bs.RunSetCommand(chatID, "set_reminder")
		bs.SetReminder(chatID, text, true, client)
	case "unset_reminder":
		bs.RunSetCommand(chatID, "unset_reminder")
		bs.SetReminder(chatID, text, false, client)
	default:
		bs.SendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	}
}

func (bs *BotService) RunSetCommand(chatID int64, command string) {
	red := color.New(color.FgRed).SprintFunc()
	err := bs.SetCommandState(chatID, "unset_reminder")
	if err != nil {
		log.Println(red("Failed to set command state: %v", err))
		bs.SendMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}
}

func (bs *BotService) SetCommandState(userID int64, command string) error {
	red := color.New(color.FgRed).SprintFunc()
	key := fmt.Sprintf("user:%d:command", userID)
	err := bs.rdb.Set(bs.redisCtx, key, command, time.Minute*5).Err()
	if err != nil {
		log.Println(red("Failed to set command state: %v", err))
		return err
	}
	return nil
}

func (bs *BotService) GetCommandState(userID int64) (string, error) {

	key := fmt.Sprintf("user:%d:command", userID)
	cmd, err := bs.rdb.Get(bs.redisCtx, key).Result()

	if err == redis.Nil {
		return "", nil
	} else if err != nil {
		log.Printf("Failed to get command state: %v", err)
		return "", err
	}
	return cmd, nil
}

func (bs *BotService) SendMessage(chatID int64, text string) {
	red := color.New(color.FgRed).SprintFunc()
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := bs.api.Send(msg)
	if err != nil {
		log.Println(red("Failed to send message: %s", err))
	}
}

func (bs *BotService) ListTasks(chatID int64) {

	filter := bson.M{"chat_id": chatID}
	cursor, err := bs.db.Find(context.TODO(), filter)
	if err != nil {
		log.Printf("Failed to list tasks: %s", err)
		bs.SendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.")
		return
	}
	defer cursor.Close(context.TODO())

	var tasks []Task
	if err := cursor.All(context.TODO(), &tasks); err != nil {
		log.Printf("Failed to decode tasks: %s", err)
		bs.SendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.")
		return
	}

	if len(tasks) == 0 {
		bs.SendMessage(chatID, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
		return
	}

	message := "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n"
	for i, task := range tasks {

		deadlineStr := "-"
		timeLeftStr := ""
		timeLeft := time.Until(task.Deadline)

		if !task.Deadline.IsZero() {
			deadlineStr = task.Deadline.Format("02 Jan 2006 15:04")

			if timeLeft > 0 {
				days := int(timeLeft.Hours()) / 24
				hours := int(timeLeft.Hours()) % 24
				minutes := int(timeLeft.Minutes()) % 60
				timeLeftStr = fmt.Sprintf(" (–û—Å—Ç–∞–ª–æ—Å—å: %d –¥–Ω. %d —á. %d –º–∏–Ω.)", days, hours, minutes)
			} else {
				timeLeftStr = " (–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)"
			}
		}

		if !task.Deadline.IsZero() {
			deadlineStr = task.Deadline.Format("02 Jan 2006 15:04")
		}

		if !task.Mark {
			message += fmt.Sprintf("%d. %s (–î–µ–¥–ª–∞–π–Ω: %s)üî• %s\n", i+1, task.Description, deadlineStr, timeLeftStr)
		} else {
			message += fmt.Sprintf("%d. %s (–î–µ–¥–ª–∞–π–Ω: %s)‚úÖ %s\n", i+1, task.Description, deadlineStr, timeLeftStr)
		}
	}
	bs.SendMessage(chatID, message)
}

func (bs *BotService) DeleteTask(chatID int64, text string) {
	if text == "" {
		bs.SendMessage(chatID, "–ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM.")
		return
	}

	taskDeadline, err := time.Parse("2006-01-02 15:04", text)
	if err != nil {
		log.Printf("Failed to decode tasks: %s", err)
		bs.SendMessage(chatID, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
		return
	}

	filter := bson.M{"chat_id": chatID, "deadline": taskDeadline}

	result, err := bs.db.DeleteOne(context.TODO(), filter)
	if err != nil {
		log.Printf("Failed to delete task: %s", err)
		bs.SendMessage(chatID, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.")
		return
	}

	if result.DeletedCount == 0 {
		bs.SendMessage(chatID, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	bs.SendMessage(chatID, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
}

func (bs *BotService) AddTask(chatID int64, description string, client *asynq.Client) {
	if description == "" {
		bs.SendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
		return
	}

	task := Task{
		ChatID:         chatID,
		Description:    description,
		CreatedAt:      time.Now(),
		Deadline:       time.Time{},
		Mark:           false,
		ReminderExists: false,
	}
	_, err := bs.db.InsertOne(context.TODO(), task)
	if err != nil {
		log.Printf("Failed to insert task: %s", err)
		bs.SendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.")
		return
	}

	bs.SendMessage(chatID, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
}

func (bs *BotService) EditTask(chatID int64, text string) {
	parts := strings.SplitN(text, "|", 2)
	if len(parts) != 2 {
		bs.SendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit <—Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>|<–Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>")
		return
	}

	if text == "" {
		bs.SendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
		return
	}

	oldText := strings.TrimSpace(parts[0])
	newText := strings.TrimSpace(parts[1])

	if oldText == "" || newText == "" {
		bs.SendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
		return
	}

	filter := bson.M{"chat_id": chatID, "description": oldText}
	update := bson.M{"$set": bson.M{"description": newText}}

	result, err := bs.db.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		log.Printf("Failed to find task: %s", err)
		return
	}

	if result.ModifiedCount == 0 {
		bs.SendMessage(chatID, "–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–ª–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
		return
	}

	bs.SendMessage(chatID, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
}

func (bs *BotService) SetDeadline(chatID int64, text string, client *asynq.Client) {
	parts := strings.SplitN(text, "|", 2)
	if len(parts) != 2 {
		bs.SendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_deadline <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏> <–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM>")
		return
	}

	taskText := strings.TrimSpace(parts[0])
	deadlineStr := strings.TrimSpace(parts[1])

	deadlineTime, err := time.Parse("2006-01-02 15:04", deadlineStr)
	if err != nil {
		bs.SendMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM")
		return
	}

	filter := bson.M{"chat_id": chatID, "description": taskText}
	update := bson.M{"$set": bson.M{"deadline": deadlineTime}}

	cursor, err := bs.db.Find(context.TODO(), filter)
	if err != nil {
		log.Printf("Failed to list tasks: %s", err)
		bs.SendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.")
		return
	}
	defer cursor.Close(context.TODO())

	var tasks []Task
	if err := cursor.All(context.TODO(), &tasks); err != nil {
		log.Printf("Failed to decode tasks: %s", err)
		bs.SendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.")
		return
	}

	result, err := bs.db.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		log.Printf("Failed to update task: %s", err)
		bs.SendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω.")
		return
	}

	if result.ModifiedCount == 0 {
		bs.SendMessage(chatID, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.")
		return
	}

	// payload, err := json.Marshal(taskToUpdate)
	// if err != nil {
	// log.Printf("Error mashalling Task to json: %s", err)
	// }

	// // Calculate the delay until the deadline
	// delay := time.Until(deadlineTime)

	// // Enqueue the task with the given parameters.
	// _, err = client.Enqueue("reminder:send", payload, asynq.ProcessAt(time.Now().Add(delay)))
	// if err != nil {
	// log.Fatalf("could not enqueue task: %v", err)
	// }

	bs.SendMessage(chatID, "–î–µ–¥–ª–∞–π–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ "+deadlineTime.Format("2006-01-02 15:04")+"!")
}

func (bs *BotService) IsDone(chatID int64, text string) {
	filter := bson.M{"chat_id": chatID, "description": text}

	_, err := bs.db.Find(context.TODO(), filter)
	if err != nil {
		bs.SendMessage(chatID, "–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		log.Printf("Failed to find task: %s", err)
		return
	}

	update := bson.M{"$set": bson.M{"mark": true, "reminder": false}}

	result, err := bs.db.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		log.Printf("Failed to mark task: %s", err)
	}

	if result.ModifiedCount == 0 {
		bs.SendMessage(chatID, "–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–ª–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
		return
	}
	bs.SendMessage(chatID, "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
}

func (bs *BotService) StartReminder(intervalMinutes int) {
	interval := time.Duration(intervalMinutes) * time.Minute
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for range ticker.C {
		bs.CheckDeadlines()
	}
}

func (bs *BotService) CheckDeadlines() {
	yellow := color.New(color.FgYellow).SprintFunc()
	log.Println(yellow("Checking deadlines..."))
	filter := bson.M{}

	cursor, err := bs.db.Find(context.TODO(), filter)
	if err != nil {
		log.Printf("Failed to retrieve tasks for deadline check: %v", err)
		return
	}
	defer cursor.Close(context.TODO())

	var tasks []Task
	if err := cursor.All(context.TODO(), &tasks); err != nil {
		log.Printf("Failed to decode tasks: %v", err)
		return
	}

	location, err := time.LoadLocation("Europe/Moscow")
	if err != nil {
		log.Printf("Failed to load location: %v", err)
		return
	}

	now := time.Now().In(location)

	for _, task := range tasks {
		timeLeft := time.Until(task.Deadline)
		timeUntilDead := task.Deadline.Sub(now)

		if !task.Deadline.IsZero() && task.ReminderExists {
			days := int(timeLeft.Hours()) / 24
			hours := int(timeLeft.Hours()) % 24
			minutes := int(timeLeft.Minutes()) % 60
			timeUntilDeadline := fmt.Sprintf(" (–û—Å—Ç–∞–ª–æ—Å—å: %d –¥–Ω. %d —á. %d –º–∏–Ω.)", days, hours, minutes)

			if timeUntilDead > 0 {
				bs.SendMessage(task.ChatID, fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –°–∫–æ—Ä–æ –¥–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ \"%s\"! %s.", task.Description, timeUntilDeadline))
			}
		}
		if timeUntilDead <= 0 && !task.Deadline.IsZero() {
			newDeadline := now.Add(24 * time.Hour)
			filter := bson.M{"chat_id": task.ChatID, "description": task.Description}
			update := bson.M{"$set": bson.M{"deadline": newDeadline}}

			result, err := bs.db.UpdateOne(context.TODO(), filter, update)
			if err != nil {
				log.Printf("Failed to update task: %s", err)
				bs.SendMessage(task.ChatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω.")
				return
			}

			if result.ModifiedCount == 0 {
				bs.SendMessage(task.ChatID, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.")
				return
			}

			bs.SendMessage(task.ChatID, fmt.Sprintf("–î–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ '%s' –∏—Å—Ç—ë–∫. –î–µ–¥–ª–∞–π–Ω –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞", task.Description))
		}
	}
}

func (bs *BotService) SetReminder(chatID int64, text string, setReminder bool, client *asynq.Client) {
	if text == "" {
		bs.SendMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
		return
	}
	filter := bson.M{"chat_id": chatID, "description": text}
	update := bson.M{"$set": bson.M{"reminder": setReminder}}

	result, err := bs.db.UpdateOne(context.TODO(), filter, update)
	if err != nil {
		log.Printf("Failed to remind task: %s", err)
		bs.SendMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
	}

	if result.ModifiedCount == 0 {
		bs.SendMessage(chatID, "–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏–ª–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
		return
	}

	// filterAgain := bson.M{"chat_id": chatID, "description": text}

	// cursor, err := bs.db.Find(context.TODO(), filterAgain)
	// if err != nil {
	// 	log.Printf("Failed to retrieve tasks for deadline check: %v", err)
	// 	return
	// }
	// defer cursor.Close(context.TODO())

	// var tasks []Task
	// if err := cursor.All(context.TODO(), &tasks); err != nil {
	// 	log.Printf("Failed to decode tasks: %v", err)
	// 	return
	// }

	// for _, task := range tasks {
	// 	if !task.Deadline.IsZero() {
	// 		payload, err := json.Marshal(task)
	// 		if err != nil {
	// 			log.Printf("Error mashalling Task to json: %s", err)
	// 		}

	// 		delay := time.Until(task.Deadline)

	// 		// Enqueue the task with the given parameters.
	// 		_, err = client.Enqueue("reminder:send", payload, asynq.ProcessAt(time.Now().Add(delay)))
	// 		if err != nil {
	// 			log.Fatalf("could not enqueue task: %v", err)
	// 		}
	// 	}
	// }

	if setReminder {
		bs.SendMessage(chatID, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
	} else {
		bs.SendMessage(chatID, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!")
	}
}
